apiVersion: v1
kind: Service
metadata:
  name: my-image-retrieval
spec:
  selector:
    app: my-image-retrieval
  ports:
<<<<<<< HEAD
    - name: https # Use http or https
      protocol: TCP
      port: 80
      targetPort: 5000
      nodePort: 30000
  type: NodePort



# apiVersion: v1
# kind: Service
# metadata:
#   name: my-image-retrieval-service
# spec:
#   selector:
#     app: my-image-retrieval
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000
#   type: LoadBalancer





# apiVersion: v1
# kind: Service
# metadata:
#   name: my-image-retrieval
# spec:
#   type: NodePort
#   selector:
#     app: my-image-retrieval
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000
#     nodePort: 30036
#     protocol: TCP






# spec:
#   type: LoadBalancer
#   externalTrafficPolicy: Local
#   externalIPs:
#   - 127.0.0.3
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000
#   selector:
#     app: my-image-retrieval




# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: my-image-retrieval
#     service: my-image-retrieval
#   name: my-image-retrieval
#   namespace: default
# spec: 
#   type: clusterIP
#   selector: 
#     app: my-image-retrieval
#   ports: 
#   - name: http
#     port: 80
#     protocol: TCP
#     targetPort: 80
#   internalTrafficPolicy: Cluster
# status:
#   loadBalancer: {}

# apiVersion: v1
# kind: Service
# metadata:
#   name: my-image-retrieval
# spec:
#   type: LoadBalancer
#   externalTrafficPolicy: Local
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000
#   selector:
#     app: my-image-retrieval


# apiVersion: v1
# kind: Service
# metadata:
#   name: my-image-retrieval-base
# spec:
#   selector:
#     app: my-image-retrieval-base
#     version: base
#   type: LoadBalancer
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000
# status:
#   loadBalancer:
#     ingress:
#     - hostname: localhost
# ---

# apiVersion: v1
# kind: Service
# metadata:
#   name: my-image-retrieval-feature-1
# spec:
#   selector:
#     app: my-image-retrieval-feature-1
#     version: feature-1
#   type: LoadBalancer
#   ports:
#   - name: http
#     port: 80
#     targetPort: 5000
# status:
#   loadBalancer:
#     ingress:
#     - hostname: localhost


# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     kubectl.kubernetes.io/last-applied-configuration: |
#       {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"ml-model-service","namespace":"default"},"spec":{"ports":[{"name":"http","port":80,"targetPort":8080}],"selector":{"app":"ml-model"},"type":"LoadBalancer"}}
#   name: my-image-retrieval
#   namespace: default
# spec:
#   allocateLoadBalancerNodePorts: true
#   clusterIP: 10.109.144.130
#   clusterIPs:
#   - 10.109.144.130
#   externalTrafficPolicy: Cluster
#   internalTrafficPolicy: Cluster
#   ipFamilies:
#   - IPv4
#   ipFamilyPolicy: SingleStack
#   ports:
#   - name: http
#     nodePort: 30000
#     port: 80
#     protocol: TCP
#     targetPort: 5050
#   selector:
#     app: my-image-retrieval
#   sessionAffinity: None
#   type: LoadBalancer
# status:
#   loadBalancer:
#     ingress:
#     - hostname: localhost





# apiVersion: v1
# kind: Service
# metadata:
#   name: my-image-retrieval
# spec:
#   type: LoadBalancer
#   ports:
#   - port: 80
#     targetPort: 5000
#     nodePort: 30000
#     protocol: TCP
#   selector: 
#     app: my-image-retrieval


=======
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer
>>>>>>> 5e3efbc90aefdc675cad00d380c21513a0d38261
